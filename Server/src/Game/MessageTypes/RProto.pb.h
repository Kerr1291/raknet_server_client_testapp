// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/MessageTypes/RProto.proto

#ifndef PROTOBUF_Game_2fMessageTypes_2fRProto_2eproto__INCLUDED
#define PROTOBUF_Game_2fMessageTypes_2fRProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

class CRequest;
class Cell;
class ChatMessage;
class Ent;
class GameNotice;
class PlayerInfo;
class PlayerMoveCommand;
class PlayerPos;
class RMsg;
class SRequest;
class TestMessage;
class View;

enum ChatMessage_ChatType {
  ChatMessage_ChatType_chat_null = 0,
  ChatMessage_ChatType_chat_normal = 1,
  ChatMessage_ChatType_chat_whisper = 2
};
bool ChatMessage_ChatType_IsValid(int value);
const ChatMessage_ChatType ChatMessage_ChatType_ChatType_MIN = ChatMessage_ChatType_chat_null;
const ChatMessage_ChatType ChatMessage_ChatType_ChatType_MAX = ChatMessage_ChatType_chat_whisper;
const int ChatMessage_ChatType_ChatType_ARRAYSIZE = ChatMessage_ChatType_ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_ChatType_descriptor();
inline const ::std::string& ChatMessage_ChatType_Name(ChatMessage_ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_ChatType_descriptor(), value);
}
inline bool ChatMessage_ChatType_Parse(
    const ::std::string& name, ChatMessage_ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_ChatType>(
    ChatMessage_ChatType_descriptor(), name, value);
}
enum GameNotice_NoticeType {
  GameNotice_NoticeType_m_null = 0,
  GameNotice_NoticeType_m_normal = 1,
  GameNotice_NoticeType_m_error = 2,
  GameNotice_NoticeType_m_notice = 3
};
bool GameNotice_NoticeType_IsValid(int value);
const GameNotice_NoticeType GameNotice_NoticeType_NoticeType_MIN = GameNotice_NoticeType_m_null;
const GameNotice_NoticeType GameNotice_NoticeType_NoticeType_MAX = GameNotice_NoticeType_m_notice;
const int GameNotice_NoticeType_NoticeType_ARRAYSIZE = GameNotice_NoticeType_NoticeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameNotice_NoticeType_descriptor();
inline const ::std::string& GameNotice_NoticeType_Name(GameNotice_NoticeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameNotice_NoticeType_descriptor(), value);
}
inline bool GameNotice_NoticeType_Parse(
    const ::std::string& name, GameNotice_NoticeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameNotice_NoticeType>(
    GameNotice_NoticeType_descriptor(), name, value);
}
enum SRequest_RequestType {
  SRequest_RequestType_r_null = 0,
  SRequest_RequestType_r_pinfo = 1
};
bool SRequest_RequestType_IsValid(int value);
const SRequest_RequestType SRequest_RequestType_RequestType_MIN = SRequest_RequestType_r_null;
const SRequest_RequestType SRequest_RequestType_RequestType_MAX = SRequest_RequestType_r_pinfo;
const int SRequest_RequestType_RequestType_ARRAYSIZE = SRequest_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SRequest_RequestType_descriptor();
inline const ::std::string& SRequest_RequestType_Name(SRequest_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SRequest_RequestType_descriptor(), value);
}
inline bool SRequest_RequestType_Parse(
    const ::std::string& name, SRequest_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SRequest_RequestType>(
    SRequest_RequestType_descriptor(), name, value);
}
enum CRequest_RequestType {
  CRequest_RequestType_r_null = 0,
  CRequest_RequestType_r_pinfo = 1
};
bool CRequest_RequestType_IsValid(int value);
const CRequest_RequestType CRequest_RequestType_RequestType_MIN = CRequest_RequestType_r_null;
const CRequest_RequestType CRequest_RequestType_RequestType_MAX = CRequest_RequestType_r_pinfo;
const int CRequest_RequestType_RequestType_ARRAYSIZE = CRequest_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CRequest_RequestType_descriptor();
inline const ::std::string& CRequest_RequestType_Name(CRequest_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CRequest_RequestType_descriptor(), value);
}
inline bool CRequest_RequestType_Parse(
    const ::std::string& name, CRequest_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CRequest_RequestType>(
    CRequest_RequestType_descriptor(), name, value);
}
enum RMessageType {
  msg_null = 0,
  msg_shutdown_server = 1,
  msg_chat = 2,
  msg_player_info = 3,
  msg_game_notice = 4,
  msg_srequest = 5,
  msg_crequest = 6,
  msg_lobby_start_game = 7,
  msg_notify_players_loading = 8,
  msg_notify_players_ready = 9,
  msg_map_data = 10,
  msg_ent_data = 11,
  msg_fov_data = 12,
  msg_player_move = 13,
  msg_player_pos = 14
};
bool RMessageType_IsValid(int value);
const RMessageType RMessageType_MIN = msg_null;
const RMessageType RMessageType_MAX = msg_player_pos;
const int RMessageType_ARRAYSIZE = RMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RMessageType_descriptor();
inline const ::std::string& RMessageType_Name(RMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RMessageType_descriptor(), value);
}
inline bool RMessageType_Parse(
    const ::std::string& name, RMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RMessageType>(
    RMessageType_descriptor(), name, value);
}
// ===================================================================

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const { return New(NULL); }

  ChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_ChatType ChatType;
  static const ChatType chat_null = ChatMessage_ChatType_chat_null;
  static const ChatType chat_normal = ChatMessage_ChatType_chat_normal;
  static const ChatType chat_whisper = ChatMessage_ChatType_chat_whisper;
  static inline bool ChatType_IsValid(int value) {
    return ChatMessage_ChatType_IsValid(value);
  }
  static const ChatType ChatType_MIN =
    ChatMessage_ChatType_ChatType_MIN;
  static const ChatType ChatType_MAX =
    ChatMessage_ChatType_ChatType_MAX;
  static const int ChatType_ARRAYSIZE =
    ChatMessage_ChatType_ChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatType_descriptor() {
    return ChatMessage_ChatType_descriptor();
  }
  static inline const ::std::string& ChatType_Name(ChatType value) {
    return ChatMessage_ChatType_Name(value);
  }
  static inline bool ChatType_Parse(const ::std::string& name,
      ChatType* value) {
    return ChatMessage_ChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string owner_ip = 1;
  bool has_owner_ip() const;
  void clear_owner_ip();
  static const int kOwnerIpFieldNumber = 1;
  const ::std::string& owner_ip() const;
  void set_owner_ip(const ::std::string& value);
  void set_owner_ip(const char* value);
  void set_owner_ip(const char* value, size_t size);
  ::std::string* mutable_owner_ip();
  ::std::string* release_owner_ip();
  void set_allocated_owner_ip(::std::string* owner_ip);

  // optional string owner_name = 2;
  bool has_owner_name() const;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 2;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  void set_owner_name(const char* value);
  void set_owner_name(const char* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // optional .rproto.ChatMessage.ChatType msg_type = 3;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 3;
  ::rproto::ChatMessage_ChatType msg_type() const;
  void set_msg_type(::rproto::ChatMessage_ChatType value);

  // optional string content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string reciever_name = 5;
  bool has_reciever_name() const;
  void clear_reciever_name();
  static const int kRecieverNameFieldNumber = 5;
  const ::std::string& reciever_name() const;
  void set_reciever_name(const ::std::string& value);
  void set_reciever_name(const char* value);
  void set_reciever_name(const char* value, size_t size);
  ::std::string* mutable_reciever_name();
  ::std::string* release_reciever_name();
  void set_allocated_reciever_name(::std::string* reciever_name);

  // @@protoc_insertion_point(class_scope:rproto.ChatMessage)
 private:
  inline void set_has_owner_ip();
  inline void clear_has_owner_ip();
  inline void set_has_owner_name();
  inline void clear_has_owner_name();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_reciever_name();
  inline void clear_has_reciever_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr owner_ip_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr reciever_name_;
  int msg_type_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class GameNotice : public ::google::protobuf::Message {
 public:
  GameNotice();
  virtual ~GameNotice();

  GameNotice(const GameNotice& from);

  inline GameNotice& operator=(const GameNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameNotice& default_instance();

  void Swap(GameNotice* other);

  // implements Message ----------------------------------------------

  inline GameNotice* New() const { return New(NULL); }

  GameNotice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameNotice& from);
  void MergeFrom(const GameNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameNotice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameNotice_NoticeType NoticeType;
  static const NoticeType m_null = GameNotice_NoticeType_m_null;
  static const NoticeType m_normal = GameNotice_NoticeType_m_normal;
  static const NoticeType m_error = GameNotice_NoticeType_m_error;
  static const NoticeType m_notice = GameNotice_NoticeType_m_notice;
  static inline bool NoticeType_IsValid(int value) {
    return GameNotice_NoticeType_IsValid(value);
  }
  static const NoticeType NoticeType_MIN =
    GameNotice_NoticeType_NoticeType_MIN;
  static const NoticeType NoticeType_MAX =
    GameNotice_NoticeType_NoticeType_MAX;
  static const int NoticeType_ARRAYSIZE =
    GameNotice_NoticeType_NoticeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoticeType_descriptor() {
    return GameNotice_NoticeType_descriptor();
  }
  static inline const ::std::string& NoticeType_Name(NoticeType value) {
    return GameNotice_NoticeType_Name(value);
  }
  static inline bool NoticeType_Parse(const ::std::string& name,
      NoticeType* value) {
    return GameNotice_NoticeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rproto.GameNotice.NoticeType msg_type = 1;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::rproto::GameNotice_NoticeType msg_type() const;
  void set_msg_type(::rproto::GameNotice_NoticeType value);

  // optional string content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:rproto.GameNotice)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int msg_type_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static GameNotice* default_instance_;
};
// -------------------------------------------------------------------

class RMsg : public ::google::protobuf::Message {
 public:
  RMsg();
  virtual ~RMsg();

  RMsg(const RMsg& from);

  inline RMsg& operator=(const RMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RMsg& default_instance();

  void Swap(RMsg* other);

  // implements Message ----------------------------------------------

  inline RMsg* New() const { return New(NULL); }

  RMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RMsg& from);
  void MergeFrom(const RMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rproto.RMessageType message_id = 1;
  bool has_message_id() const;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  ::rproto::RMessageType message_id() const;
  void set_message_id(::rproto::RMessageType value);

  // @@protoc_insertion_point(class_scope:rproto.RMsg)
 private:
  inline void set_has_message_id();
  inline void clear_has_message_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int message_id_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static RMsg* default_instance_;
};
// -------------------------------------------------------------------

class SRequest : public ::google::protobuf::Message {
 public:
  SRequest();
  virtual ~SRequest();

  SRequest(const SRequest& from);

  inline SRequest& operator=(const SRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRequest& default_instance();

  void Swap(SRequest* other);

  // implements Message ----------------------------------------------

  inline SRequest* New() const { return New(NULL); }

  SRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRequest& from);
  void MergeFrom(const SRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SRequest_RequestType RequestType;
  static const RequestType r_null = SRequest_RequestType_r_null;
  static const RequestType r_pinfo = SRequest_RequestType_r_pinfo;
  static inline bool RequestType_IsValid(int value) {
    return SRequest_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    SRequest_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    SRequest_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    SRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return SRequest_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return SRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return SRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rproto.SRequest.RequestType request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::rproto::SRequest_RequestType request_id() const;
  void set_request_id(::rproto::SRequest_RequestType value);

  // @@protoc_insertion_point(class_scope:rproto.SRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int request_id_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static SRequest* default_instance_;
};
// -------------------------------------------------------------------

class CRequest : public ::google::protobuf::Message {
 public:
  CRequest();
  virtual ~CRequest();

  CRequest(const CRequest& from);

  inline CRequest& operator=(const CRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CRequest& default_instance();

  void Swap(CRequest* other);

  // implements Message ----------------------------------------------

  inline CRequest* New() const { return New(NULL); }

  CRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRequest& from);
  void MergeFrom(const CRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CRequest_RequestType RequestType;
  static const RequestType r_null = CRequest_RequestType_r_null;
  static const RequestType r_pinfo = CRequest_RequestType_r_pinfo;
  static inline bool RequestType_IsValid(int value) {
    return CRequest_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    CRequest_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    CRequest_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    CRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return CRequest_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return CRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return CRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rproto.CRequest.RequestType request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::rproto::CRequest_RequestType request_id() const;
  void set_request_id(::rproto::CRequest_RequestType value);

  // @@protoc_insertion_point(class_scope:rproto.CRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int request_id_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static CRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const { return New(NULL); }

  PlayerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:rproto.PlayerInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  inline TestMessage* New() const { return New(NULL); }

  TestMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:rproto.TestMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// -------------------------------------------------------------------

class Ent : public ::google::protobuf::Message {
 public:
  Ent();
  virtual ~Ent();

  Ent(const Ent& from);

  inline Ent& operator=(const Ent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ent& default_instance();

  void Swap(Ent* other);

  // implements Message ----------------------------------------------

  inline Ent* New() const { return New(NULL); }

  Ent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ent& from);
  void MergeFrom(const Ent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type_id = 1;
  bool has_type_id() const;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  ::google::protobuf::int32 type_id() const;
  void set_type_id(::google::protobuf::int32 value);

  // optional int32 game_id = 2;
  bool has_game_id() const;
  void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rproto.Ent)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 game_id_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static Ent* default_instance_;
};
// -------------------------------------------------------------------

class Cell : public ::google::protobuf::Message {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cell& default_instance();

  void Swap(Cell* other);

  // implements Message ----------------------------------------------

  inline Cell* New() const { return New(NULL); }

  Cell* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cx = 1;
  bool has_cx() const;
  void clear_cx();
  static const int kCxFieldNumber = 1;
  ::google::protobuf::int32 cx() const;
  void set_cx(::google::protobuf::int32 value);

  // optional int32 cy = 2;
  bool has_cy() const;
  void clear_cy();
  static const int kCyFieldNumber = 2;
  ::google::protobuf::int32 cy() const;
  void set_cy(::google::protobuf::int32 value);

  // repeated .rproto.Ent ents = 3;
  int ents_size() const;
  void clear_ents();
  static const int kEntsFieldNumber = 3;
  const ::rproto::Ent& ents(int index) const;
  ::rproto::Ent* mutable_ents(int index);
  ::rproto::Ent* add_ents();
  ::google::protobuf::RepeatedPtrField< ::rproto::Ent >*
      mutable_ents();
  const ::google::protobuf::RepeatedPtrField< ::rproto::Ent >&
      ents() const;

  // @@protoc_insertion_point(class_scope:rproto.Cell)
 private:
  inline void set_has_cx();
  inline void clear_has_cx();
  inline void set_has_cy();
  inline void clear_has_cy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cx_;
  ::google::protobuf::int32 cy_;
  ::google::protobuf::RepeatedPtrField< ::rproto::Ent > ents_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static Cell* default_instance_;
};
// -------------------------------------------------------------------

class View : public ::google::protobuf::Message {
 public:
  View();
  virtual ~View();

  View(const View& from);

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const View& default_instance();

  void Swap(View* other);

  // implements Message ----------------------------------------------

  inline View* New() const { return New(NULL); }

  View* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(View* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 radius = 1;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 1;
  ::google::protobuf::int32 radius() const;
  void set_radius(::google::protobuf::int32 value);

  // repeated .rproto.Cell cells = 2;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 2;
  const ::rproto::Cell& cells(int index) const;
  ::rproto::Cell* mutable_cells(int index);
  ::rproto::Cell* add_cells();
  ::google::protobuf::RepeatedPtrField< ::rproto::Cell >*
      mutable_cells();
  const ::google::protobuf::RepeatedPtrField< ::rproto::Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:rproto.View)
 private:
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::rproto::Cell > cells_;
  ::google::protobuf::int32 radius_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static View* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMoveCommand : public ::google::protobuf::Message {
 public:
  PlayerMoveCommand();
  virtual ~PlayerMoveCommand();

  PlayerMoveCommand(const PlayerMoveCommand& from);

  inline PlayerMoveCommand& operator=(const PlayerMoveCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveCommand& default_instance();

  void Swap(PlayerMoveCommand* other);

  // implements Message ----------------------------------------------

  inline PlayerMoveCommand* New() const { return New(NULL); }

  PlayerMoveCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMoveCommand& from);
  void MergeFrom(const PlayerMoveCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerMoveCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dx = 1;
  bool has_dx() const;
  void clear_dx();
  static const int kDxFieldNumber = 1;
  float dx() const;
  void set_dx(float value);

  // optional float dy = 2;
  bool has_dy() const;
  void clear_dy();
  static const int kDyFieldNumber = 2;
  float dy() const;
  void set_dy(float value);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:rproto.PlayerMoveCommand)
 private:
  inline void set_has_dx();
  inline void clear_has_dx();
  inline void set_has_dy();
  inline void clear_has_dy();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dx_;
  float dy_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static PlayerMoveCommand* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPos : public ::google::protobuf::Message {
 public:
  PlayerPos();
  virtual ~PlayerPos();

  PlayerPos(const PlayerPos& from);

  inline PlayerPos& operator=(const PlayerPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPos& default_instance();

  void Swap(PlayerPos* other);

  // implements Message ----------------------------------------------

  inline PlayerPos* New() const { return New(NULL); }

  PlayerPos* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPos& from);
  void MergeFrom(const PlayerPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerPos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float px = 1;
  bool has_px() const;
  void clear_px();
  static const int kPxFieldNumber = 1;
  float px() const;
  void set_px(float value);

  // optional float py = 2;
  bool has_py() const;
  void clear_py();
  static const int kPyFieldNumber = 2;
  float py() const;
  void set_py(float value);

  // optional int32 cx = 3;
  bool has_cx() const;
  void clear_cx();
  static const int kCxFieldNumber = 3;
  ::google::protobuf::int32 cx() const;
  void set_cx(::google::protobuf::int32 value);

  // optional int32 cy = 4;
  bool has_cy() const;
  void clear_cy();
  static const int kCyFieldNumber = 4;
  ::google::protobuf::int32 cy() const;
  void set_cy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rproto.PlayerPos)
 private:
  inline void set_has_px();
  inline void clear_has_px();
  inline void set_has_py();
  inline void clear_has_py();
  inline void set_has_cx();
  inline void clear_has_cx();
  inline void set_has_cy();
  inline void clear_has_cy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float px_;
  float py_;
  ::google::protobuf::int32 cx_;
  ::google::protobuf::int32 cy_;
  friend void  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto();
  friend void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto();

  void InitAsDefaultInstance();
  static PlayerPos* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional string owner_ip = 1;
inline bool ChatMessage::has_owner_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_owner_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_owner_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_owner_ip() {
  owner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_ip();
}
inline const ::std::string& ChatMessage::owner_ip() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.owner_ip)
  return owner_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_owner_ip(const ::std::string& value) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.owner_ip)
}
inline void ChatMessage::set_owner_ip(const char* value) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.owner_ip)
}
inline void ChatMessage::set_owner_ip(const char* value, size_t size) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.owner_ip)
}
inline ::std::string* ChatMessage::mutable_owner_ip() {
  set_has_owner_ip();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.owner_ip)
  return owner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_owner_ip() {
  clear_has_owner_ip();
  return owner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_owner_ip(::std::string* owner_ip) {
  if (owner_ip != NULL) {
    set_has_owner_ip();
  } else {
    clear_has_owner_ip();
  }
  owner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_ip);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.owner_ip)
}

// optional string owner_name = 2;
inline bool ChatMessage::has_owner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_owner_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
inline const ::std::string& ChatMessage::owner_name() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.owner_name)
}
inline void ChatMessage::set_owner_name(const char* value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.owner_name)
}
inline void ChatMessage::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.owner_name)
}
inline ::std::string* ChatMessage::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_owner_name() {
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.owner_name)
}

// optional .rproto.ChatMessage.ChatType msg_type = 3;
inline bool ChatMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::rproto::ChatMessage_ChatType ChatMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.msg_type)
  return static_cast< ::rproto::ChatMessage_ChatType >(msg_type_);
}
inline void ChatMessage::set_msg_type(::rproto::ChatMessage_ChatType value) {
  assert(::rproto::ChatMessage_ChatType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.msg_type)
}

// optional string content = 4;
inline bool ChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.content)
}
inline void ChatMessage::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.content)
}
inline void ChatMessage::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.content)
}
inline ::std::string* ChatMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.content)
}

// optional string reciever_name = 5;
inline bool ChatMessage::has_reciever_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_reciever_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_reciever_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_reciever_name() {
  reciever_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reciever_name();
}
inline const ::std::string& ChatMessage::reciever_name() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.reciever_name)
  return reciever_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_reciever_name(const ::std::string& value) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.reciever_name)
}
inline void ChatMessage::set_reciever_name(const char* value) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.reciever_name)
}
inline void ChatMessage::set_reciever_name(const char* value, size_t size) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.reciever_name)
}
inline ::std::string* ChatMessage::mutable_reciever_name() {
  set_has_reciever_name();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.reciever_name)
  return reciever_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_reciever_name() {
  clear_has_reciever_name();
  return reciever_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_reciever_name(::std::string* reciever_name) {
  if (reciever_name != NULL) {
    set_has_reciever_name();
  } else {
    clear_has_reciever_name();
  }
  reciever_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reciever_name);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.reciever_name)
}

// -------------------------------------------------------------------

// GameNotice

// optional .rproto.GameNotice.NoticeType msg_type = 1;
inline bool GameNotice::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameNotice::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameNotice::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameNotice::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::rproto::GameNotice_NoticeType GameNotice::msg_type() const {
  // @@protoc_insertion_point(field_get:rproto.GameNotice.msg_type)
  return static_cast< ::rproto::GameNotice_NoticeType >(msg_type_);
}
inline void GameNotice::set_msg_type(::rproto::GameNotice_NoticeType value) {
  assert(::rproto::GameNotice_NoticeType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:rproto.GameNotice.msg_type)
}

// optional string content = 2;
inline bool GameNotice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameNotice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameNotice::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& GameNotice::content() const {
  // @@protoc_insertion_point(field_get:rproto.GameNotice.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameNotice::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.GameNotice.content)
}
inline void GameNotice::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.GameNotice.content)
}
inline void GameNotice::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.GameNotice.content)
}
inline ::std::string* GameNotice::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rproto.GameNotice.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameNotice::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameNotice::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rproto.GameNotice.content)
}

// -------------------------------------------------------------------

// RMsg

// optional .rproto.RMessageType message_id = 1;
inline bool RMsg::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RMsg::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RMsg::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RMsg::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::rproto::RMessageType RMsg::message_id() const {
  // @@protoc_insertion_point(field_get:rproto.RMsg.message_id)
  return static_cast< ::rproto::RMessageType >(message_id_);
}
inline void RMsg::set_message_id(::rproto::RMessageType value) {
  assert(::rproto::RMessageType_IsValid(value));
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.RMsg.message_id)
}

// -------------------------------------------------------------------

// SRequest

// optional .rproto.SRequest.RequestType request_id = 1;
inline bool SRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRequest::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
inline ::rproto::SRequest_RequestType SRequest::request_id() const {
  // @@protoc_insertion_point(field_get:rproto.SRequest.request_id)
  return static_cast< ::rproto::SRequest_RequestType >(request_id_);
}
inline void SRequest::set_request_id(::rproto::SRequest_RequestType value) {
  assert(::rproto::SRequest_RequestType_IsValid(value));
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.SRequest.request_id)
}

// -------------------------------------------------------------------

// CRequest

// optional .rproto.CRequest.RequestType request_id = 1;
inline bool CRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRequest::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
inline ::rproto::CRequest_RequestType CRequest::request_id() const {
  // @@protoc_insertion_point(field_get:rproto.CRequest.request_id)
  return static_cast< ::rproto::CRequest_RequestType >(request_id_);
}
inline void CRequest::set_request_id(::rproto::CRequest_RequestType value) {
  assert(::rproto::CRequest_RequestType_IsValid(value));
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.CRequest.request_id)
}

// -------------------------------------------------------------------

// PlayerInfo

// optional string name = 1;
inline bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerInfo.name)
}
inline void PlayerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerInfo.name)
}
inline void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerInfo.name)
}
inline ::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerInfo.name)
}

// optional string ip = 2;
inline bool PlayerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& PlayerInfo::ip() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerInfo.ip)
}
inline void PlayerInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerInfo.ip)
}
inline void PlayerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerInfo.ip)
}
inline ::std::string* PlayerInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerInfo.ip)
}

// -------------------------------------------------------------------

// TestMessage

// optional string data = 1;
inline bool TestMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& TestMessage::data() const {
  // @@protoc_insertion_point(field_get:rproto.TestMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.TestMessage.data)
}
inline void TestMessage::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.TestMessage.data)
}
inline void TestMessage::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.TestMessage.data)
}
inline ::std::string* TestMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:rproto.TestMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMessage::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:rproto.TestMessage.data)
}

// -------------------------------------------------------------------

// Ent

// optional int32 type_id = 1;
inline bool Ent::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ent::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ent::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ent::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 Ent::type_id() const {
  // @@protoc_insertion_point(field_get:rproto.Ent.type_id)
  return type_id_;
}
inline void Ent::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.Ent.type_id)
}

// optional int32 game_id = 2;
inline bool Ent::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ent::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ent::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ent::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 Ent::game_id() const {
  // @@protoc_insertion_point(field_get:rproto.Ent.game_id)
  return game_id_;
}
inline void Ent::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.Ent.game_id)
}

// -------------------------------------------------------------------

// Cell

// optional int32 cx = 1;
inline bool Cell::has_cx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cell::set_has_cx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cell::clear_has_cx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cell::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
inline ::google::protobuf::int32 Cell::cx() const {
  // @@protoc_insertion_point(field_get:rproto.Cell.cx)
  return cx_;
}
inline void Cell::set_cx(::google::protobuf::int32 value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:rproto.Cell.cx)
}

// optional int32 cy = 2;
inline bool Cell::has_cy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cell::set_has_cy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cell::clear_has_cy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cell::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
inline ::google::protobuf::int32 Cell::cy() const {
  // @@protoc_insertion_point(field_get:rproto.Cell.cy)
  return cy_;
}
inline void Cell::set_cy(::google::protobuf::int32 value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:rproto.Cell.cy)
}

// repeated .rproto.Ent ents = 3;
inline int Cell::ents_size() const {
  return ents_.size();
}
inline void Cell::clear_ents() {
  ents_.Clear();
}
inline const ::rproto::Ent& Cell::ents(int index) const {
  // @@protoc_insertion_point(field_get:rproto.Cell.ents)
  return ents_.Get(index);
}
inline ::rproto::Ent* Cell::mutable_ents(int index) {
  // @@protoc_insertion_point(field_mutable:rproto.Cell.ents)
  return ents_.Mutable(index);
}
inline ::rproto::Ent* Cell::add_ents() {
  // @@protoc_insertion_point(field_add:rproto.Cell.ents)
  return ents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rproto::Ent >*
Cell::mutable_ents() {
  // @@protoc_insertion_point(field_mutable_list:rproto.Cell.ents)
  return &ents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rproto::Ent >&
Cell::ents() const {
  // @@protoc_insertion_point(field_list:rproto.Cell.ents)
  return ents_;
}

// -------------------------------------------------------------------

// View

// optional int32 radius = 1;
inline bool View::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void View::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void View::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void View::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline ::google::protobuf::int32 View::radius() const {
  // @@protoc_insertion_point(field_get:rproto.View.radius)
  return radius_;
}
inline void View::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:rproto.View.radius)
}

// repeated .rproto.Cell cells = 2;
inline int View::cells_size() const {
  return cells_.size();
}
inline void View::clear_cells() {
  cells_.Clear();
}
inline const ::rproto::Cell& View::cells(int index) const {
  // @@protoc_insertion_point(field_get:rproto.View.cells)
  return cells_.Get(index);
}
inline ::rproto::Cell* View::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:rproto.View.cells)
  return cells_.Mutable(index);
}
inline ::rproto::Cell* View::add_cells() {
  // @@protoc_insertion_point(field_add:rproto.View.cells)
  return cells_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rproto::Cell >*
View::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:rproto.View.cells)
  return &cells_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rproto::Cell >&
View::cells() const {
  // @@protoc_insertion_point(field_list:rproto.View.cells)
  return cells_;
}

// -------------------------------------------------------------------

// PlayerMoveCommand

// optional float dx = 1;
inline bool PlayerMoveCommand::has_dx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMoveCommand::set_has_dx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMoveCommand::clear_has_dx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMoveCommand::clear_dx() {
  dx_ = 0;
  clear_has_dx();
}
inline float PlayerMoveCommand::dx() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.dx)
  return dx_;
}
inline void PlayerMoveCommand::set_dx(float value) {
  set_has_dx();
  dx_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.dx)
}

// optional float dy = 2;
inline bool PlayerMoveCommand::has_dy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMoveCommand::set_has_dy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMoveCommand::clear_has_dy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMoveCommand::clear_dy() {
  dy_ = 0;
  clear_has_dy();
}
inline float PlayerMoveCommand::dy() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.dy)
  return dy_;
}
inline void PlayerMoveCommand::set_dy(float value) {
  set_has_dy();
  dy_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.dy)
}

// optional string name = 3;
inline bool PlayerMoveCommand::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMoveCommand::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMoveCommand::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMoveCommand::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlayerMoveCommand::name() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoveCommand::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.name)
}
inline void PlayerMoveCommand::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerMoveCommand.name)
}
inline void PlayerMoveCommand::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerMoveCommand.name)
}
inline ::std::string* PlayerMoveCommand::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerMoveCommand.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMoveCommand::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoveCommand::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerMoveCommand.name)
}

// -------------------------------------------------------------------

// PlayerPos

// optional float px = 1;
inline bool PlayerPos::has_px() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPos::set_has_px() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPos::clear_has_px() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPos::clear_px() {
  px_ = 0;
  clear_has_px();
}
inline float PlayerPos::px() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.px)
  return px_;
}
inline void PlayerPos::set_px(float value) {
  set_has_px();
  px_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.px)
}

// optional float py = 2;
inline bool PlayerPos::has_py() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPos::set_has_py() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPos::clear_has_py() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPos::clear_py() {
  py_ = 0;
  clear_has_py();
}
inline float PlayerPos::py() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.py)
  return py_;
}
inline void PlayerPos::set_py(float value) {
  set_has_py();
  py_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.py)
}

// optional int32 cx = 3;
inline bool PlayerPos::has_cx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPos::set_has_cx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPos::clear_has_cx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPos::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
inline ::google::protobuf::int32 PlayerPos::cx() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.cx)
  return cx_;
}
inline void PlayerPos::set_cx(::google::protobuf::int32 value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.cx)
}

// optional int32 cy = 4;
inline bool PlayerPos::has_cy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerPos::set_has_cy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerPos::clear_has_cy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerPos::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
inline ::google::protobuf::int32 PlayerPos::cy() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.cy)
  return cy_;
}
inline void PlayerPos::set_cy(::google::protobuf::int32 value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.cy)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rproto::ChatMessage_ChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rproto::ChatMessage_ChatType>() {
  return ::rproto::ChatMessage_ChatType_descriptor();
}
template <> struct is_proto_enum< ::rproto::GameNotice_NoticeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rproto::GameNotice_NoticeType>() {
  return ::rproto::GameNotice_NoticeType_descriptor();
}
template <> struct is_proto_enum< ::rproto::SRequest_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rproto::SRequest_RequestType>() {
  return ::rproto::SRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::rproto::CRequest_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rproto::CRequest_RequestType>() {
  return ::rproto::CRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::rproto::RMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rproto::RMessageType>() {
  return ::rproto::RMessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2fMessageTypes_2fRProto_2eproto__INCLUDED
