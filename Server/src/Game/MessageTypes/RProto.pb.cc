// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/MessageTypes/RProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/MessageTypes/RProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rproto {

namespace {

const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatMessage_ChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameNotice_NoticeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* View_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  View_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMoveCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMoveCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto() {
  protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Game/MessageTypes/RProto.proto");
  GOOGLE_CHECK(file != NULL);
  ChatMessage_descriptor_ = file->message_type(0);
  static const int ChatMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, owner_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, reciever_name_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      -1);
  ChatMessage_ChatType_descriptor_ = ChatMessage_descriptor_->enum_type(0);
  GameNotice_descriptor_ = file->message_type(1);
  static const int GameNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, content_),
  };
  GameNotice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameNotice_descriptor_,
      GameNotice::default_instance_,
      GameNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameNotice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, _internal_metadata_),
      -1);
  GameNotice_NoticeType_descriptor_ = GameNotice_descriptor_->enum_type(0);
  RMsg_descriptor_ = file->message_type(2);
  static const int RMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMsg, message_id_),
  };
  RMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RMsg_descriptor_,
      RMsg::default_instance_,
      RMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(RMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMsg, _internal_metadata_),
      -1);
  SRequest_descriptor_ = file->message_type(3);
  static const int SRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRequest, request_id_),
  };
  SRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SRequest_descriptor_,
      SRequest::default_instance_,
      SRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRequest, _internal_metadata_),
      -1);
  SRequest_RequestType_descriptor_ = SRequest_descriptor_->enum_type(0);
  CRequest_descriptor_ = file->message_type(4);
  static const int CRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRequest, request_id_),
  };
  CRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CRequest_descriptor_,
      CRequest::default_instance_,
      CRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRequest, _internal_metadata_),
      -1);
  CRequest_RequestType_descriptor_ = CRequest_descriptor_->enum_type(0);
  PlayerInfo_descriptor_ = file->message_type(5);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, ip_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      -1);
  TestMessage_descriptor_ = file->message_type(6);
  static const int TestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, data_),
  };
  TestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _internal_metadata_),
      -1);
  Ent_descriptor_ = file->message_type(7);
  static const int Ent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ent, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ent, game_id_),
  };
  Ent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ent_descriptor_,
      Ent::default_instance_,
      Ent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ent, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ent, _internal_metadata_),
      -1);
  Cell_descriptor_ = file->message_type(8);
  static const int Cell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, cy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ents_),
  };
  Cell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      -1,
      -1,
      sizeof(Cell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _internal_metadata_),
      -1);
  View_descriptor_ = file->message_type(9);
  static const int View_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, cells_),
  };
  View_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      View_descriptor_,
      View::default_instance_,
      View_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _has_bits_[0]),
      -1,
      -1,
      sizeof(View),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _internal_metadata_),
      -1);
  PlayerMoveCommand_descriptor_ = file->message_type(10);
  static const int PlayerMoveCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveCommand, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveCommand, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveCommand, name_),
  };
  PlayerMoveCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerMoveCommand_descriptor_,
      PlayerMoveCommand::default_instance_,
      PlayerMoveCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerMoveCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveCommand, _internal_metadata_),
      -1);
  PlayerPos_descriptor_ = file->message_type(11);
  static const int PlayerPos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, cy_),
  };
  PlayerPos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerPos_descriptor_,
      PlayerPos::default_instance_,
      PlayerPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerPos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPos, _internal_metadata_),
      -1);
  RMessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Game_2fMessageTypes_2fRProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameNotice_descriptor_, &GameNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RMsg_descriptor_, &RMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SRequest_descriptor_, &SRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CRequest_descriptor_, &CRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ent_descriptor_, &Ent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      View_descriptor_, &View::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerMoveCommand_descriptor_, &PlayerMoveCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerPos_descriptor_, &PlayerPos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto() {
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete GameNotice::default_instance_;
  delete GameNotice_reflection_;
  delete RMsg::default_instance_;
  delete RMsg_reflection_;
  delete SRequest::default_instance_;
  delete SRequest_reflection_;
  delete CRequest::default_instance_;
  delete CRequest_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete TestMessage::default_instance_;
  delete TestMessage_reflection_;
  delete Ent::default_instance_;
  delete Ent_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete View::default_instance_;
  delete View_reflection_;
  delete PlayerMoveCommand::default_instance_;
  delete PlayerMoveCommand_reflection_;
  delete PlayerPos::default_instance_;
  delete PlayerPos_reflection_;
}

void protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036Game/MessageTypes/RProto.proto\022\006rproto"
    "\"\311\001\n\013ChatMessage\022\020\n\010owner_ip\030\001 \001(\t\022\022\n\now"
    "ner_name\030\002 \001(\t\022.\n\010msg_type\030\003 \001(\0162\034.rprot"
    "o.ChatMessage.ChatType\022\017\n\007content\030\004 \001(\t\022"
    "\025\n\rreciever_name\030\005 \001(\t\"<\n\010ChatType\022\r\n\tch"
    "at_null\020\000\022\017\n\013chat_normal\020\001\022\020\n\014chat_whisp"
    "er\020\002\"\221\001\n\nGameNotice\022/\n\010msg_type\030\001 \001(\0162\035."
    "rproto.GameNotice.NoticeType\022\017\n\007content\030"
    "\002 \001(\t\"A\n\nNoticeType\022\n\n\006m_null\020\000\022\014\n\010m_nor"
    "mal\020\001\022\013\n\007m_error\020\002\022\014\n\010m_notice\020\003\"0\n\004RMsg"
    "\022(\n\nmessage_id\030\001 \001(\0162\024.rproto.RMessageTy"
    "pe\"d\n\010SRequest\0220\n\nrequest_id\030\001 \001(\0162\034.rpr"
    "oto.SRequest.RequestType\"&\n\013RequestType\022"
    "\n\n\006r_null\020\000\022\013\n\007r_pinfo\020\001\"d\n\010CRequest\0220\n\n"
    "request_id\030\001 \001(\0162\034.rproto.CRequest.Reque"
    "stType\"&\n\013RequestType\022\n\n\006r_null\020\000\022\013\n\007r_p"
    "info\020\001\"&\n\nPlayerInfo\022\014\n\004name\030\001 \001(\t\022\n\n\002ip"
    "\030\002 \001(\t\"\033\n\013TestMessage\022\014\n\004data\030\001 \001(\t\"\'\n\003E"
    "nt\022\017\n\007type_id\030\001 \001(\005\022\017\n\007game_id\030\002 \001(\005\"9\n\004"
    "Cell\022\n\n\002cx\030\001 \001(\005\022\n\n\002cy\030\002 \001(\005\022\031\n\004ents\030\003 \003"
    "(\0132\013.rproto.Ent\"3\n\004View\022\016\n\006radius\030\001 \001(\005\022"
    "\033\n\005cells\030\002 \003(\0132\014.rproto.Cell\"9\n\021PlayerMo"
    "veCommand\022\n\n\002dx\030\001 \001(\002\022\n\n\002dy\030\002 \001(\002\022\014\n\004nam"
    "e\030\003 \001(\t\";\n\tPlayerPos\022\n\n\002px\030\001 \001(\002\022\n\n\002py\030\002"
    " \001(\002\022\n\n\002cx\030\003 \001(\005\022\n\n\002cy\030\004 \001(\005*\310\002\n\014RMessag"
    "eType\022\014\n\010msg_null\020\000\022\027\n\023msg_shutdown_serv"
    "er\020\001\022\014\n\010msg_chat\020\002\022\023\n\017msg_player_info\020\003\022"
    "\023\n\017msg_game_notice\020\004\022\020\n\014msg_srequest\020\005\022\020"
    "\n\014msg_crequest\020\006\022\030\n\024msg_lobby_start_game"
    "\020\007\022\036\n\032msg_notify_players_loading\020\010\022\034\n\030ms"
    "g_notify_players_ready\020\t\022\020\n\014msg_map_data"
    "\020\n\022\020\n\014msg_ent_data\020\013\022\020\n\014msg_fov_data\020\014\022\023"
    "\n\017msg_player_move\020\r\022\022\n\016msg_player_pos\020\016", 1319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Game/MessageTypes/RProto.proto", &protobuf_RegisterTypes);
  ChatMessage::default_instance_ = new ChatMessage();
  GameNotice::default_instance_ = new GameNotice();
  RMsg::default_instance_ = new RMsg();
  SRequest::default_instance_ = new SRequest();
  CRequest::default_instance_ = new CRequest();
  PlayerInfo::default_instance_ = new PlayerInfo();
  TestMessage::default_instance_ = new TestMessage();
  Ent::default_instance_ = new Ent();
  Cell::default_instance_ = new Cell();
  View::default_instance_ = new View();
  PlayerMoveCommand::default_instance_ = new PlayerMoveCommand();
  PlayerPos::default_instance_ = new PlayerPos();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  GameNotice::default_instance_->InitAsDefaultInstance();
  RMsg::default_instance_->InitAsDefaultInstance();
  SRequest::default_instance_->InitAsDefaultInstance();
  CRequest::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  TestMessage::default_instance_->InitAsDefaultInstance();
  Ent::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  View::default_instance_->InitAsDefaultInstance();
  PlayerMoveCommand::default_instance_->InitAsDefaultInstance();
  PlayerPos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fMessageTypes_2fRProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fMessageTypes_2fRProto_2eproto {
  StaticDescriptorInitializer_Game_2fMessageTypes_2fRProto_2eproto() {
    protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  }
} static_descriptor_initializer_Game_2fMessageTypes_2fRProto_2eproto_;
const ::google::protobuf::EnumDescriptor* RMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMessageType_descriptor_;
}
bool RMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatMessage_ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_ChatType_descriptor_;
}
bool ChatMessage_ChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatMessage_ChatType ChatMessage::chat_null;
const ChatMessage_ChatType ChatMessage::chat_normal;
const ChatMessage_ChatType ChatMessage::chat_whisper;
const ChatMessage_ChatType ChatMessage::ChatType_MIN;
const ChatMessage_ChatType ChatMessage::ChatType_MAX;
const int ChatMessage::ChatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatMessage::kOwnerIpFieldNumber;
const int ChatMessage::kOwnerNameFieldNumber;
const int ChatMessage::kMsgTypeFieldNumber;
const int ChatMessage::kContentFieldNumber;
const int ChatMessage::kRecieverNameFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  owner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reciever_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:rproto.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  owner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reciever_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_owner_ip()) {
      owner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_owner_name()) {
      owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    msg_type_ = 0;
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reciever_name()) {
      reciever_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string owner_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_ip().data(), this->owner_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.ChatMessage.owner_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner_name;
        break;
      }

      // optional string owner_name = 2;
      case 2: {
        if (tag == 18) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.ChatMessage.owner_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_type;
        break;
      }

      // optional .rproto.ChatMessage.ChatType msg_type = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rproto::ChatMessage_ChatType_IsValid(value)) {
            set_msg_type(static_cast< ::rproto::ChatMessage_ChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.ChatMessage.content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reciever_name;
        break;
      }

      // optional string reciever_name = 5;
      case 5: {
        if (tag == 42) {
         parse_reciever_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reciever_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reciever_name().data(), this->reciever_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.ChatMessage.reciever_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.ChatMessage)
  // optional string owner_ip = 1;
  if (has_owner_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_ip().data(), this->owner_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.owner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->owner_ip(), output);
  }

  // optional string owner_name = 2;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_name(), output);
  }

  // optional .rproto.ChatMessage.ChatType msg_type = 3;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msg_type(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional string reciever_name = 5;
  if (has_reciever_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reciever_name().data(), this->reciever_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.reciever_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reciever_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.ChatMessage)
  // optional string owner_ip = 1;
  if (has_owner_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_ip().data(), this->owner_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.owner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->owner_ip(), target);
  }

  // optional string owner_name = 2;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_name(), target);
  }

  // optional .rproto.ChatMessage.ChatType msg_type = 3;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msg_type(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional string reciever_name = 5;
  if (has_reciever_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reciever_name().data(), this->reciever_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.ChatMessage.reciever_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reciever_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string owner_ip = 1;
    if (has_owner_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_ip());
    }

    // optional string owner_name = 2;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }

    // optional .rproto.ChatMessage.ChatType msg_type = 3;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string reciever_name = 5;
    if (has_reciever_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reciever_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_ip()) {
      set_has_owner_ip();
      owner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_ip_);
    }
    if (from.has_owner_name()) {
      set_has_owner_name();
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (from.has_reciever_name()) {
      set_has_reciever_name();
      reciever_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reciever_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  owner_ip_.Swap(&other->owner_ip_);
  owner_name_.Swap(&other->owner_name_);
  std::swap(msg_type_, other->msg_type_);
  content_.Swap(&other->content_);
  reciever_name_.Swap(&other->reciever_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional string owner_ip = 1;
bool ChatMessage::has_owner_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatMessage::set_has_owner_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatMessage::clear_has_owner_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatMessage::clear_owner_ip() {
  owner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_ip();
}
 const ::std::string& ChatMessage::owner_ip() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.owner_ip)
  return owner_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_owner_ip(const ::std::string& value) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.owner_ip)
}
 void ChatMessage::set_owner_ip(const char* value) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.owner_ip)
}
 void ChatMessage::set_owner_ip(const char* value, size_t size) {
  set_has_owner_ip();
  owner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.owner_ip)
}
 ::std::string* ChatMessage::mutable_owner_ip() {
  set_has_owner_ip();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.owner_ip)
  return owner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_owner_ip() {
  clear_has_owner_ip();
  return owner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_owner_ip(::std::string* owner_ip) {
  if (owner_ip != NULL) {
    set_has_owner_ip();
  } else {
    clear_has_owner_ip();
  }
  owner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_ip);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.owner_ip)
}

// optional string owner_name = 2;
bool ChatMessage::has_owner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatMessage::set_has_owner_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatMessage::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatMessage::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
 const ::std::string& ChatMessage::owner_name() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.owner_name)
}
 void ChatMessage::set_owner_name(const char* value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.owner_name)
}
 void ChatMessage::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.owner_name)
}
 ::std::string* ChatMessage::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_owner_name() {
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.owner_name)
}

// optional .rproto.ChatMessage.ChatType msg_type = 3;
bool ChatMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::rproto::ChatMessage_ChatType ChatMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.msg_type)
  return static_cast< ::rproto::ChatMessage_ChatType >(msg_type_);
}
 void ChatMessage::set_msg_type(::rproto::ChatMessage_ChatType value) {
  assert(::rproto::ChatMessage_ChatType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.msg_type)
}

// optional string content = 4;
bool ChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.content)
}
 void ChatMessage::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.content)
}
 void ChatMessage::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.content)
}
 ::std::string* ChatMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.content)
}

// optional string reciever_name = 5;
bool ChatMessage::has_reciever_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatMessage::set_has_reciever_name() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatMessage::clear_has_reciever_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatMessage::clear_reciever_name() {
  reciever_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reciever_name();
}
 const ::std::string& ChatMessage::reciever_name() const {
  // @@protoc_insertion_point(field_get:rproto.ChatMessage.reciever_name)
  return reciever_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_reciever_name(const ::std::string& value) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.ChatMessage.reciever_name)
}
 void ChatMessage::set_reciever_name(const char* value) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.ChatMessage.reciever_name)
}
 void ChatMessage::set_reciever_name(const char* value, size_t size) {
  set_has_reciever_name();
  reciever_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.ChatMessage.reciever_name)
}
 ::std::string* ChatMessage::mutable_reciever_name() {
  set_has_reciever_name();
  // @@protoc_insertion_point(field_mutable:rproto.ChatMessage.reciever_name)
  return reciever_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_reciever_name() {
  clear_has_reciever_name();
  return reciever_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_reciever_name(::std::string* reciever_name) {
  if (reciever_name != NULL) {
    set_has_reciever_name();
  } else {
    clear_has_reciever_name();
  }
  reciever_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reciever_name);
  // @@protoc_insertion_point(field_set_allocated:rproto.ChatMessage.reciever_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameNotice_NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNotice_NoticeType_descriptor_;
}
bool GameNotice_NoticeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameNotice_NoticeType GameNotice::m_null;
const GameNotice_NoticeType GameNotice::m_normal;
const GameNotice_NoticeType GameNotice::m_error;
const GameNotice_NoticeType GameNotice::m_notice;
const GameNotice_NoticeType GameNotice::NoticeType_MIN;
const GameNotice_NoticeType GameNotice::NoticeType_MAX;
const int GameNotice::NoticeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameNotice::kMsgTypeFieldNumber;
const int GameNotice::kContentFieldNumber;
#endif  // !_MSC_VER

GameNotice::GameNotice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.GameNotice)
}

void GameNotice::InitAsDefaultInstance() {
}

GameNotice::GameNotice(const GameNotice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.GameNotice)
}

void GameNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNotice::~GameNotice() {
  // @@protoc_insertion_point(destructor:rproto.GameNotice)
  SharedDtor();
}

void GameNotice::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNotice_descriptor_;
}

const GameNotice& GameNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

GameNotice* GameNotice::default_instance_ = NULL;

GameNotice* GameNotice::New(::google::protobuf::Arena* arena) const {
  GameNotice* n = new GameNotice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotice::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    msg_type_ = 0;
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.GameNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rproto.GameNotice.NoticeType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rproto::GameNotice_NoticeType_IsValid(value)) {
            set_msg_type(static_cast< ::rproto::GameNotice_NoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.GameNotice.content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.GameNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.GameNotice)
  return false;
#undef DO_
}

void GameNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.GameNotice)
  // optional .rproto.GameNotice.NoticeType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.GameNotice.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.GameNotice)
}

::google::protobuf::uint8* GameNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.GameNotice)
  // optional .rproto.GameNotice.NoticeType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.GameNotice.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.GameNotice)
  return target;
}

int GameNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .rproto.GameNotice.NoticeType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotice::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameNotice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotice>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNotice::MergeFrom(const GameNotice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotice::CopyFrom(const GameNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotice::IsInitialized() const {

  return true;
}

void GameNotice::Swap(GameNotice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotice::InternalSwap(GameNotice* other) {
  std::swap(msg_type_, other->msg_type_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNotice_descriptor_;
  metadata.reflection = GameNotice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameNotice

// optional .rproto.GameNotice.NoticeType msg_type = 1;
bool GameNotice::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameNotice::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GameNotice::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameNotice::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::rproto::GameNotice_NoticeType GameNotice::msg_type() const {
  // @@protoc_insertion_point(field_get:rproto.GameNotice.msg_type)
  return static_cast< ::rproto::GameNotice_NoticeType >(msg_type_);
}
 void GameNotice::set_msg_type(::rproto::GameNotice_NoticeType value) {
  assert(::rproto::GameNotice_NoticeType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:rproto.GameNotice.msg_type)
}

// optional string content = 2;
bool GameNotice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameNotice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void GameNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameNotice::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& GameNotice::content() const {
  // @@protoc_insertion_point(field_get:rproto.GameNotice.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameNotice::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.GameNotice.content)
}
 void GameNotice::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.GameNotice.content)
}
 void GameNotice::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.GameNotice.content)
}
 ::std::string* GameNotice::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rproto.GameNotice.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameNotice::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameNotice::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rproto.GameNotice.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RMsg::kMessageIdFieldNumber;
#endif  // !_MSC_VER

RMsg::RMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.RMsg)
}

void RMsg::InitAsDefaultInstance() {
}

RMsg::RMsg(const RMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.RMsg)
}

void RMsg::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RMsg::~RMsg() {
  // @@protoc_insertion_point(destructor:rproto.RMsg)
  SharedDtor();
}

void RMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMsg_descriptor_;
}

const RMsg& RMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

RMsg* RMsg::default_instance_ = NULL;

RMsg* RMsg::New(::google::protobuf::Arena* arena) const {
  RMsg* n = new RMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RMsg::Clear() {
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.RMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rproto.RMessageType message_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rproto::RMessageType_IsValid(value)) {
            set_message_id(static_cast< ::rproto::RMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.RMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.RMsg)
  return false;
#undef DO_
}

void RMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.RMsg)
  // optional .rproto.RMessageType message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.RMsg)
}

::google::protobuf::uint8* RMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.RMsg)
  // optional .rproto.RMessageType message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.RMsg)
  return target;
}

int RMsg::ByteSize() const {
  int total_size = 0;

  // optional .rproto.RMessageType message_id = 1;
  if (has_message_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RMsg::MergeFrom(const RMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMsg::CopyFrom(const RMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMsg::IsInitialized() const {

  return true;
}

void RMsg::Swap(RMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RMsg::InternalSwap(RMsg* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RMsg_descriptor_;
  metadata.reflection = RMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RMsg

// optional .rproto.RMessageType message_id = 1;
bool RMsg::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RMsg::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RMsg::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RMsg::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
 ::rproto::RMessageType RMsg::message_id() const {
  // @@protoc_insertion_point(field_get:rproto.RMsg.message_id)
  return static_cast< ::rproto::RMessageType >(message_id_);
}
 void RMsg::set_message_id(::rproto::RMessageType value) {
  assert(::rproto::RMessageType_IsValid(value));
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.RMsg.message_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRequest_RequestType_descriptor_;
}
bool SRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SRequest_RequestType SRequest::r_null;
const SRequest_RequestType SRequest::r_pinfo;
const SRequest_RequestType SRequest::RequestType_MIN;
const SRequest_RequestType SRequest::RequestType_MAX;
const int SRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SRequest::kRequestIdFieldNumber;
#endif  // !_MSC_VER

SRequest::SRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.SRequest)
}

void SRequest::InitAsDefaultInstance() {
}

SRequest::SRequest(const SRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.SRequest)
}

void SRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRequest::~SRequest() {
  // @@protoc_insertion_point(destructor:rproto.SRequest)
  SharedDtor();
}

void SRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRequest_descriptor_;
}

const SRequest& SRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

SRequest* SRequest::default_instance_ = NULL;

SRequest* SRequest::New(::google::protobuf::Arena* arena) const {
  SRequest* n = new SRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SRequest::Clear() {
  request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.SRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rproto.SRequest.RequestType request_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rproto::SRequest_RequestType_IsValid(value)) {
            set_request_id(static_cast< ::rproto::SRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.SRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.SRequest)
  return false;
#undef DO_
}

void SRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.SRequest)
  // optional .rproto.SRequest.RequestType request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.SRequest)
}

::google::protobuf::uint8* SRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.SRequest)
  // optional .rproto.SRequest.RequestType request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.SRequest)
  return target;
}

int SRequest::ByteSize() const {
  int total_size = 0;

  // optional .rproto.SRequest.RequestType request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRequest::MergeFrom(const SRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRequest::CopyFrom(const SRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRequest::IsInitialized() const {

  return true;
}

void SRequest::Swap(SRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SRequest::InternalSwap(SRequest* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRequest_descriptor_;
  metadata.reflection = SRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SRequest

// optional .rproto.SRequest.RequestType request_id = 1;
bool SRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SRequest::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
 ::rproto::SRequest_RequestType SRequest::request_id() const {
  // @@protoc_insertion_point(field_get:rproto.SRequest.request_id)
  return static_cast< ::rproto::SRequest_RequestType >(request_id_);
}
 void SRequest::set_request_id(::rproto::SRequest_RequestType value) {
  assert(::rproto::SRequest_RequestType_IsValid(value));
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.SRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRequest_RequestType_descriptor_;
}
bool CRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CRequest_RequestType CRequest::r_null;
const CRequest_RequestType CRequest::r_pinfo;
const CRequest_RequestType CRequest::RequestType_MIN;
const CRequest_RequestType CRequest::RequestType_MAX;
const int CRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CRequest::kRequestIdFieldNumber;
#endif  // !_MSC_VER

CRequest::CRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.CRequest)
}

void CRequest::InitAsDefaultInstance() {
}

CRequest::CRequest(const CRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.CRequest)
}

void CRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRequest::~CRequest() {
  // @@protoc_insertion_point(destructor:rproto.CRequest)
  SharedDtor();
}

void CRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRequest_descriptor_;
}

const CRequest& CRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

CRequest* CRequest::default_instance_ = NULL;

CRequest* CRequest::New(::google::protobuf::Arena* arena) const {
  CRequest* n = new CRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CRequest::Clear() {
  request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.CRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rproto.CRequest.RequestType request_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rproto::CRequest_RequestType_IsValid(value)) {
            set_request_id(static_cast< ::rproto::CRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.CRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.CRequest)
  return false;
#undef DO_
}

void CRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.CRequest)
  // optional .rproto.CRequest.RequestType request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.CRequest)
}

::google::protobuf::uint8* CRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.CRequest)
  // optional .rproto.CRequest.RequestType request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.CRequest)
  return target;
}

int CRequest::ByteSize() const {
  int total_size = 0;

  // optional .rproto.CRequest.RequestType request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRequest::MergeFrom(const CRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRequest::CopyFrom(const CRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRequest::IsInitialized() const {

  return true;
}

void CRequest::Swap(CRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRequest::InternalSwap(CRequest* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRequest_descriptor_;
  metadata.reflection = CRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CRequest

// optional .rproto.CRequest.RequestType request_id = 1;
bool CRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CRequest::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
 ::rproto::CRequest_RequestType CRequest::request_id() const {
  // @@protoc_insertion_point(field_get:rproto.CRequest.request_id)
  return static_cast< ::rproto::CRequest_RequestType >(request_id_);
}
 void CRequest::set_request_id(::rproto::CRequest_RequestType value) {
  assert(::rproto::CRequest_RequestType_IsValid(value));
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.CRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kIpFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:rproto.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.PlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.PlayerInfo.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.PlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.PlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional string name = 1;
bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerInfo.name)
}
 ::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerInfo.name)
}

// optional string ip = 2;
bool PlayerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& PlayerInfo::ip() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerInfo.ip)
}
 void PlayerInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerInfo.ip)
}
 void PlayerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerInfo.ip)
}
 ::std::string* PlayerInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerInfo.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TestMessage::kDataFieldNumber;
#endif  // !_MSC_VER

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.TestMessage)
}

void TestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:rproto.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage* n = new TestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.TestMessage.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.TestMessage)
  // optional string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.TestMessage.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.TestMessage)
}

::google::protobuf::uint8* TestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.TestMessage)
  // optional string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.TestMessage.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.TestMessage)
  return target;
}

int TestMessage::ByteSize() const {
  int total_size = 0;

  // optional string data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {

  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMessage

// optional string data = 1;
bool TestMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void TestMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& TestMessage::data() const {
  // @@protoc_insertion_point(field_get:rproto.TestMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.TestMessage.data)
}
 void TestMessage::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.TestMessage.data)
}
 void TestMessage::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.TestMessage.data)
}
 ::std::string* TestMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:rproto.TestMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:rproto.TestMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Ent::kTypeIdFieldNumber;
const int Ent::kGameIdFieldNumber;
#endif  // !_MSC_VER

Ent::Ent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.Ent)
}

void Ent::InitAsDefaultInstance() {
}

Ent::Ent(const Ent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.Ent)
}

void Ent::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ent::~Ent() {
  // @@protoc_insertion_point(destructor:rproto.Ent)
  SharedDtor();
}

void Ent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ent_descriptor_;
}

const Ent& Ent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

Ent* Ent::default_instance_ = NULL;

Ent* Ent::New(::google::protobuf::Arena* arena) const {
  Ent* n = new Ent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_id_, game_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.Ent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.Ent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.Ent)
  return false;
#undef DO_
}

void Ent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.Ent)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.Ent)
}

::google::protobuf::uint8* Ent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.Ent)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.Ent)
  return target;
}

int Ent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ent::MergeFrom(const Ent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ent::CopyFrom(const Ent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ent::IsInitialized() const {

  return true;
}

void Ent::Swap(Ent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ent::InternalSwap(Ent* other) {
  std::swap(type_id_, other->type_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ent_descriptor_;
  metadata.reflection = Ent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ent

// optional int32 type_id = 1;
bool Ent::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ent::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Ent::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ent::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 Ent::type_id() const {
  // @@protoc_insertion_point(field_get:rproto.Ent.type_id)
  return type_id_;
}
 void Ent::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.Ent.type_id)
}

// optional int32 game_id = 2;
bool Ent::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ent::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Ent::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ent::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
 ::google::protobuf::int32 Ent::game_id() const {
  // @@protoc_insertion_point(field_get:rproto.Ent.game_id)
  return game_id_;
}
 void Ent::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:rproto.Ent.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Cell::kCxFieldNumber;
const int Cell::kCyFieldNumber;
const int Cell::kEntsFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.Cell)
}

void Cell::InitAsDefaultInstance() {
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.Cell)
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  cx_ = 0;
  cy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:rproto.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cell*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cx_, cy_);

#undef ZR_HELPER_
#undef ZR_

  ents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cy;
        break;
      }

      // optional int32 cy = 2;
      case 2: {
        if (tag == 16) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ents;
        break;
      }

      // repeated .rproto.Ent ents = 3;
      case 3: {
        if (tag == 26) {
         parse_ents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.Cell)
  // optional int32 cx = 1;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cx(), output);
  }

  // optional int32 cy = 2;
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cy(), output);
  }

  // repeated .rproto.Ent ents = 3;
  for (unsigned int i = 0, n = this->ents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.Cell)
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.Cell)
  // optional int32 cx = 1;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cx(), target);
  }

  // optional int32 cy = 2;
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cy(), target);
  }

  // repeated .rproto.Ent ents = 3;
  for (unsigned int i = 0, n = this->ents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ents(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.Cell)
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cx = 1;
    if (has_cx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cx());
    }

    // optional int32 cy = 2;
    if (has_cy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cy());
    }

  }
  // repeated .rproto.Ent ents = 3;
  total_size += 1 * this->ents_size();
  for (int i = 0; i < this->ents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ents(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ents_.MergeFrom(from.ents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_cy()) {
      set_cy(from.cy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {

  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  std::swap(cx_, other->cx_);
  std::swap(cy_, other->cy_);
  ents_.UnsafeArenaSwap(&other->ents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// optional int32 cx = 1;
bool Cell::has_cx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cell::set_has_cx() {
  _has_bits_[0] |= 0x00000001u;
}
void Cell::clear_has_cx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cell::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
 ::google::protobuf::int32 Cell::cx() const {
  // @@protoc_insertion_point(field_get:rproto.Cell.cx)
  return cx_;
}
 void Cell::set_cx(::google::protobuf::int32 value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:rproto.Cell.cx)
}

// optional int32 cy = 2;
bool Cell::has_cy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Cell::set_has_cy() {
  _has_bits_[0] |= 0x00000002u;
}
void Cell::clear_has_cy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Cell::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
 ::google::protobuf::int32 Cell::cy() const {
  // @@protoc_insertion_point(field_get:rproto.Cell.cy)
  return cy_;
}
 void Cell::set_cy(::google::protobuf::int32 value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:rproto.Cell.cy)
}

// repeated .rproto.Ent ents = 3;
int Cell::ents_size() const {
  return ents_.size();
}
void Cell::clear_ents() {
  ents_.Clear();
}
const ::rproto::Ent& Cell::ents(int index) const {
  // @@protoc_insertion_point(field_get:rproto.Cell.ents)
  return ents_.Get(index);
}
::rproto::Ent* Cell::mutable_ents(int index) {
  // @@protoc_insertion_point(field_mutable:rproto.Cell.ents)
  return ents_.Mutable(index);
}
::rproto::Ent* Cell::add_ents() {
  // @@protoc_insertion_point(field_add:rproto.Cell.ents)
  return ents_.Add();
}
::google::protobuf::RepeatedPtrField< ::rproto::Ent >*
Cell::mutable_ents() {
  // @@protoc_insertion_point(field_mutable_list:rproto.Cell.ents)
  return &ents_;
}
const ::google::protobuf::RepeatedPtrField< ::rproto::Ent >&
Cell::ents() const {
  // @@protoc_insertion_point(field_list:rproto.Cell.ents)
  return ents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int View::kRadiusFieldNumber;
const int View::kCellsFieldNumber;
#endif  // !_MSC_VER

View::View()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.View)
}

void View::InitAsDefaultInstance() {
}

View::View(const View& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.View)
}

void View::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:rproto.View)
  SharedDtor();
}

void View::SharedDtor() {
  if (this != default_instance_) {
  }
}

void View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* View::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return View_descriptor_;
}

const View& View::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

View* View::default_instance_ = NULL;

View* View::New(::google::protobuf::Arena* arena) const {
  View* n = new View;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void View::Clear() {
  radius_ = 0;
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.View)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 radius = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cells;
        break;
      }

      // repeated .rproto.Cell cells = 2;
      case 2: {
        if (tag == 18) {
         parse_cells:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cells;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.View)
  return false;
#undef DO_
}

void View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.View)
  // optional int32 radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->radius(), output);
  }

  // repeated .rproto.Cell cells = 2;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cells(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.View)
}

::google::protobuf::uint8* View::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.View)
  // optional int32 radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->radius(), target);
  }

  // repeated .rproto.Cell cells = 2;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cells(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.View)
  return target;
}

int View::ByteSize() const {
  int total_size = 0;

  // optional int32 radius = 1;
  if (has_radius()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radius());
  }

  // repeated .rproto.Cell cells = 2;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void View::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const View* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const View>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void View::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {

  return true;
}

void View::Swap(View* other) {
  if (other == this) return;
  InternalSwap(other);
}
void View::InternalSwap(View* other) {
  std::swap(radius_, other->radius_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata View::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = View_descriptor_;
  metadata.reflection = View_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// View

// optional int32 radius = 1;
bool View::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void View::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
void View::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
void View::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 ::google::protobuf::int32 View::radius() const {
  // @@protoc_insertion_point(field_get:rproto.View.radius)
  return radius_;
}
 void View::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:rproto.View.radius)
}

// repeated .rproto.Cell cells = 2;
int View::cells_size() const {
  return cells_.size();
}
void View::clear_cells() {
  cells_.Clear();
}
const ::rproto::Cell& View::cells(int index) const {
  // @@protoc_insertion_point(field_get:rproto.View.cells)
  return cells_.Get(index);
}
::rproto::Cell* View::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:rproto.View.cells)
  return cells_.Mutable(index);
}
::rproto::Cell* View::add_cells() {
  // @@protoc_insertion_point(field_add:rproto.View.cells)
  return cells_.Add();
}
::google::protobuf::RepeatedPtrField< ::rproto::Cell >*
View::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:rproto.View.cells)
  return &cells_;
}
const ::google::protobuf::RepeatedPtrField< ::rproto::Cell >&
View::cells() const {
  // @@protoc_insertion_point(field_list:rproto.View.cells)
  return cells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PlayerMoveCommand::kDxFieldNumber;
const int PlayerMoveCommand::kDyFieldNumber;
const int PlayerMoveCommand::kNameFieldNumber;
#endif  // !_MSC_VER

PlayerMoveCommand::PlayerMoveCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.PlayerMoveCommand)
}

void PlayerMoveCommand::InitAsDefaultInstance() {
}

PlayerMoveCommand::PlayerMoveCommand(const PlayerMoveCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.PlayerMoveCommand)
}

void PlayerMoveCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMoveCommand::~PlayerMoveCommand() {
  // @@protoc_insertion_point(destructor:rproto.PlayerMoveCommand)
  SharedDtor();
}

void PlayerMoveCommand::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerMoveCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMoveCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMoveCommand_descriptor_;
}

const PlayerMoveCommand& PlayerMoveCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

PlayerMoveCommand* PlayerMoveCommand::default_instance_ = NULL;

PlayerMoveCommand* PlayerMoveCommand::New(::google::protobuf::Arena* arena) const {
  PlayerMoveCommand* n = new PlayerMoveCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerMoveCommand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerMoveCommand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(dx_, dy_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerMoveCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.PlayerMoveCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dx = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_dy;
        break;
      }

      // optional float dy = 2;
      case 2: {
        if (tag == 21) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rproto.PlayerMoveCommand.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.PlayerMoveCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.PlayerMoveCommand)
  return false;
#undef DO_
}

void PlayerMoveCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.PlayerMoveCommand)
  // optional float dx = 1;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dx(), output);
  }

  // optional float dy = 2;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dy(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerMoveCommand.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.PlayerMoveCommand)
}

::google::protobuf::uint8* PlayerMoveCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.PlayerMoveCommand)
  // optional float dx = 1;
  if (has_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dx(), target);
  }

  // optional float dy = 2;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dy(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rproto.PlayerMoveCommand.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.PlayerMoveCommand)
  return target;
}

int PlayerMoveCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float dx = 1;
    if (has_dx()) {
      total_size += 1 + 4;
    }

    // optional float dy = 2;
    if (has_dy()) {
      total_size += 1 + 4;
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMoveCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerMoveCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMoveCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMoveCommand::MergeFrom(const PlayerMoveCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerMoveCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMoveCommand::CopyFrom(const PlayerMoveCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveCommand::IsInitialized() const {

  return true;
}

void PlayerMoveCommand::Swap(PlayerMoveCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMoveCommand::InternalSwap(PlayerMoveCommand* other) {
  std::swap(dx_, other->dx_);
  std::swap(dy_, other->dy_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerMoveCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMoveCommand_descriptor_;
  metadata.reflection = PlayerMoveCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerMoveCommand

// optional float dx = 1;
bool PlayerMoveCommand::has_dx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerMoveCommand::set_has_dx() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerMoveCommand::clear_has_dx() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerMoveCommand::clear_dx() {
  dx_ = 0;
  clear_has_dx();
}
 float PlayerMoveCommand::dx() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.dx)
  return dx_;
}
 void PlayerMoveCommand::set_dx(float value) {
  set_has_dx();
  dx_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.dx)
}

// optional float dy = 2;
bool PlayerMoveCommand::has_dy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerMoveCommand::set_has_dy() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerMoveCommand::clear_has_dy() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerMoveCommand::clear_dy() {
  dy_ = 0;
  clear_has_dy();
}
 float PlayerMoveCommand::dy() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.dy)
  return dy_;
}
 void PlayerMoveCommand::set_dy(float value) {
  set_has_dy();
  dy_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.dy)
}

// optional string name = 3;
bool PlayerMoveCommand::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerMoveCommand::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerMoveCommand::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerMoveCommand::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PlayerMoveCommand::name() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerMoveCommand.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerMoveCommand::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rproto.PlayerMoveCommand.name)
}
 void PlayerMoveCommand::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rproto.PlayerMoveCommand.name)
}
 void PlayerMoveCommand::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rproto.PlayerMoveCommand.name)
}
 ::std::string* PlayerMoveCommand::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rproto.PlayerMoveCommand.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerMoveCommand::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerMoveCommand::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rproto.PlayerMoveCommand.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PlayerPos::kPxFieldNumber;
const int PlayerPos::kPyFieldNumber;
const int PlayerPos::kCxFieldNumber;
const int PlayerPos::kCyFieldNumber;
#endif  // !_MSC_VER

PlayerPos::PlayerPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rproto.PlayerPos)
}

void PlayerPos::InitAsDefaultInstance() {
}

PlayerPos::PlayerPos(const PlayerPos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rproto.PlayerPos)
}

void PlayerPos::SharedCtor() {
  _cached_size_ = 0;
  px_ = 0;
  py_ = 0;
  cx_ = 0;
  cy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPos::~PlayerPos() {
  // @@protoc_insertion_point(destructor:rproto.PlayerPos)
  SharedDtor();
}

void PlayerPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPos_descriptor_;
}

const PlayerPos& PlayerPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fMessageTypes_2fRProto_2eproto();
  return *default_instance_;
}

PlayerPos* PlayerPos::default_instance_ = NULL;

PlayerPos* PlayerPos::New(::google::protobuf::Arena* arena) const {
  PlayerPos* n = new PlayerPos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPos::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerPos*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(px_, cy_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rproto.PlayerPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float px = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_py;
        break;
      }

      // optional float py = 2;
      case 2: {
        if (tag == 21) {
         parse_py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cx;
        break;
      }

      // optional int32 cx = 3;
      case 3: {
        if (tag == 24) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cy;
        break;
      }

      // optional int32 cy = 4;
      case 4: {
        if (tag == 32) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rproto.PlayerPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rproto.PlayerPos)
  return false;
#undef DO_
}

void PlayerPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rproto.PlayerPos)
  // optional float px = 1;
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->px(), output);
  }

  // optional float py = 2;
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->py(), output);
  }

  // optional int32 cx = 3;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cx(), output);
  }

  // optional int32 cy = 4;
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rproto.PlayerPos)
}

::google::protobuf::uint8* PlayerPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rproto.PlayerPos)
  // optional float px = 1;
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->px(), target);
  }

  // optional float py = 2;
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->py(), target);
  }

  // optional int32 cx = 3;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cx(), target);
  }

  // optional int32 cy = 4;
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rproto.PlayerPos)
  return target;
}

int PlayerPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float px = 1;
    if (has_px()) {
      total_size += 1 + 4;
    }

    // optional float py = 2;
    if (has_py()) {
      total_size += 1 + 4;
    }

    // optional int32 cx = 3;
    if (has_cx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cx());
    }

    // optional int32 cy = 4;
    if (has_cy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cy());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPos::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerPos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPos>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPos::MergeFrom(const PlayerPos& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_cy()) {
      set_cy(from.cy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPos::CopyFrom(const PlayerPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPos::IsInitialized() const {

  return true;
}

void PlayerPos::Swap(PlayerPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPos::InternalSwap(PlayerPos* other) {
  std::swap(px_, other->px_);
  std::swap(py_, other->py_);
  std::swap(cx_, other->cx_);
  std::swap(cy_, other->cy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPos_descriptor_;
  metadata.reflection = PlayerPos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerPos

// optional float px = 1;
bool PlayerPos::has_px() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerPos::set_has_px() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerPos::clear_has_px() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerPos::clear_px() {
  px_ = 0;
  clear_has_px();
}
 float PlayerPos::px() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.px)
  return px_;
}
 void PlayerPos::set_px(float value) {
  set_has_px();
  px_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.px)
}

// optional float py = 2;
bool PlayerPos::has_py() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerPos::set_has_py() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerPos::clear_has_py() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerPos::clear_py() {
  py_ = 0;
  clear_has_py();
}
 float PlayerPos::py() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.py)
  return py_;
}
 void PlayerPos::set_py(float value) {
  set_has_py();
  py_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.py)
}

// optional int32 cx = 3;
bool PlayerPos::has_cx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerPos::set_has_cx() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerPos::clear_has_cx() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerPos::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
 ::google::protobuf::int32 PlayerPos::cx() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.cx)
  return cx_;
}
 void PlayerPos::set_cx(::google::protobuf::int32 value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.cx)
}

// optional int32 cy = 4;
bool PlayerPos::has_cy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerPos::set_has_cy() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerPos::clear_has_cy() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerPos::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
 ::google::protobuf::int32 PlayerPos::cy() const {
  // @@protoc_insertion_point(field_get:rproto.PlayerPos.cy)
  return cy_;
}
 void PlayerPos::set_cy(::google::protobuf::int32 value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:rproto.PlayerPos.cy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rproto

// @@protoc_insertion_point(global_scope)
